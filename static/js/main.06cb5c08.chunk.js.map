{"version":3,"sources":["images/wallet.png","actions/index.js","reducers/user.js","reducers/wallet.js","reducers/index.js","store/index.js","pages/Login.js","components/Header.jsx","components/CurrencyOptions.jsx","helpers/index.js","components/AddExpenseButton.jsx","components/ExpenseForm.jsx","components/ExpenseTableHead.jsx","components/ExpenseTableBody.jsx","components/ExpensesTable.jsx","pages/Wallet.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","getCurrenciesSuccess","currencies","type","payload","newExpense","exchangeRates","id","value","description","currency","method","tag","INITIAL_STATE","email","user","state","action","expenses","total","expensesIdCounter","wallet","Object","entries","data","parseFloat","toBeRemovedElement","filter","expense","Number","index","expenseCurrency","Math","round","ask","rootReducer","combineReducers","store","createStore","reducer","composeWithDevTools","applyMiddleware","thunk","Login","userEmail","password","validateEmail","handleChange","bind","handleClick","test","String","toLowerCase","target","this","setState","enableEmail","userEmailDispatchAction","props","data-testid","onChange","required","placeholder","to","disabled","length","onClick","React","Component","connect","dispatch","userEmailAction","Header","src","walletImage","alt","defaultProps","CurrencyOptions","getCurrencies","currencie","map","key","a","fetch","response","json","handleTotalState","totalCost","lastElementIndex","cost","AddExpenseButton","handleTotal","newExpenseThunk","totalCostAction","ExpenseForm","htmlFor","className","ExpenseTableHead","ExpenseTableBody","handleDeleteButton","removeExpense","console","log","name","removeExpenseAction","ExpensesTable","Wallet","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","basename","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.06cb5c08.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/wallet.5523f71a.png\";","export const USER_EMAIL = 'USER_EMAIL';\nexport const GET_CURRENCIES_SUCCESS = 'GET_CURRENCIES_SUCCESS';\nexport const GET_CURRENCIES_ERROR = 'GET_CURRENCIES_ERROR';\nexport const NEW_EXPENSE = 'NEW_EXPENSE';\nexport const TOTAL_COST = 'TOTAL_COST';\nexport const REMOVE_EXPENSE = 'REMOVE_EXPENSE';\n\nexport const userEmailAction = (email) => ({\n  type: USER_EMAIL,\n  payload: {\n    email,\n  },\n});\n\nexport const getCurrenciesSuccess = (currencies) => ({\n  type: GET_CURRENCIES_SUCCESS,\n  payload: {\n    currencies,\n  },\n});\n\nexport const newExpense = (\n  { value, description, currency, method, tag }, exchangeRates,\n) => ({\n  type: NEW_EXPENSE,\n  payload: {\n    id: 0,\n    value,\n    description,\n    currency,\n    method,\n    tag,\n    exchangeRates,\n  },\n});\n\nexport const totalCost = (total) => ({\n  type: TOTAL_COST,\n  payload: {\n    total,\n  },\n});\n\nexport const getCurrenciesThunk = () => async (dispatch) => {\n  const response = await fetch('https://economia.awesomeapi.com.br/json/all');\n  const data = await response.json();\n  const currencies = {\n    data,\n  };\n  dispatch(getCurrenciesSuccess(currencies));\n};\n\nexport const newExpenseThunk = (\n  { value, description, currency, method, tag },\n) => async (dispatch) => {\n  const response = await fetch('https://economia.awesomeapi.com.br/json/all');\n  const exchangeRates = await response.json();\n  dispatch(newExpense({ value, description, currency, method, tag }, exchangeRates));\n};\n\nexport const removeExpense = (index) => ({\n  type: REMOVE_EXPENSE,\n  payload: {\n    index,\n  },\n});\n","import { USER_EMAIL } from '../actions';\n\nconst INITIAL_STATE = {\n  email: '',\n};\n\nfunction user(state = INITIAL_STATE, action) {\n  switch (action.type) {\n  case USER_EMAIL:\n    return {\n      ...state,\n      email: action.payload.email,\n    };\n  default:\n    return state;\n  }\n}\n\nexport default user;\n","import {\n  GET_CURRENCIES_SUCCESS, NEW_EXPENSE, TOTAL_COST, REMOVE_EXPENSE } from '../actions';\n\nconst INITIAL_STATE = {\n  currencies: [],\n  expenses: [],\n  total: 0,\n  expensesIdCounter: 0,\n};\n\nfunction wallet(state = INITIAL_STATE, action) {\n  switch (action.type) {\n  case GET_CURRENCIES_SUCCESS:\n    return {\n      ...state,\n      currencies: Object.entries(action.payload.currencies.data),\n    };\n  case NEW_EXPENSE: {\n    return {\n      ...state,\n      expenses: [...state.expenses, {\n        id: state.expensesIdCounter,\n        value: action.payload.value,\n        description: action.payload.description,\n        currency: action.payload.currency,\n        method: action.payload.method,\n        tag: action.payload.tag,\n        exchangeRates: action.payload.exchangeRates,\n      }],\n      expensesIdCounter: state.expensesIdCounter + 1,\n    };\n  }\n  case TOTAL_COST: {\n    return {\n      ...state,\n      total: parseFloat(state.total) + parseFloat(action.payload.total),\n    };\n  }\n  case REMOVE_EXPENSE: {\n    const toBeRemovedElement = state.expenses\n      .filter((expense) => expense.id === Number(action.payload.index))[0];\n    const expenseCurrency = toBeRemovedElement.currency;\n    return {\n      ...state,\n      total: state.total - (Math.round(Number(toBeRemovedElement\n        .exchangeRates[expenseCurrency].ask) * Number(toBeRemovedElement.value)\n         * 100) / 100),\n      expenses: state.expenses.filter((expense) => expense !== toBeRemovedElement),\n    };\n  }\n  default:\n    return state;\n  }\n}\n\nexport default wallet;\n","import { combineReducers } from 'redux';\nimport user from './user';\nimport wallet from './wallet';\n\nconst rootReducer = combineReducers({\n  user,\n  wallet,\n});\n\nexport default rootReducer;\n","import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport reducer from '../reducers';\n\nconst store = createStore(\n  reducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport default store;\n","import PropTypes from \"prop-types\";\nimport React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport { userEmailAction } from \"../actions/index\";\nimport \"../style/Login.css\";\n\nclass Login extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      userEmail: \"\",\n      password: \"\",\n      validateEmail: false,\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  // https://stackoverflow.com/questions/46155/how-to-validate-an-email-address-in-javascript\n  validateEmail(userEmail) {\n    const re = /\\S+@\\S+\\.\\S+/;\n    return re.test(String(userEmail).toLowerCase());\n  }\n\n  handleChange({ target: { value, id } }) {\n    this.setState(\n      {\n        [id]: value,\n      },\n      () => {\n        const { userEmail } = this.state;\n        const enableEmail = this.validateEmail(userEmail);\n        this.setState({ validateEmail: enableEmail });\n      }\n    );\n  }\n\n  handleClick() {\n    const { userEmailDispatchAction } = this.props;\n    const { userEmail } = this.state;\n    userEmailDispatchAction(userEmail);\n  }\n\n  render() {\n    const { userEmail, password, validateEmail } = this.state;\n    const MIN_PASSWORD_CHARACTERS = 6;\n\n    return (\n      <section id=\"login-wrapper\">\n        <form id=\"login-form\">\n          <input\n            type=\"email\"\n            id=\"userEmail\"\n            data-testid=\"email-input\"\n            onChange={this.handleChange}\n            value={userEmail}\n            required\n            placeholder=\"email\"\n          />\n          <br />\n          <input\n            type=\"password\"\n            id=\"password\"\n            data-testid=\"password-input\"\n            onChange={this.handleChange}\n            placeholder=\"senha\"\n          />\n          <br />\n          <Link to=\"/carteira\">\n            <button\n              type=\"button\"\n              disabled={\n                !(password.length >= MIN_PASSWORD_CHARACTERS && validateEmail)\n              }\n              onClick={this.handleClick}\n            >\n              Entrar\n            </button>\n          </Link>\n        </form>\n      </section>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  userEmailDispatchAction: (email) => dispatch(userEmailAction(email)),\n});\n\nLogin.propTypes = {\n  userEmailDispatchAction: PropTypes.func.isRequired,\n};\n\nexport default connect(null, mapDispatchToProps)(Login);\n","import PropTypes from \"prop-types\";\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport walletImage from \"../images/wallet.png\";\n\nclass Header extends Component {\n  render() {\n    const { email, total } = this.props;\n    return (\n      <div id=\"header\">\n        <img src={walletImage} alt=\"wallet\" id=\"wallet-img\" />\n        {/* <div>\n          Icons made by{\" \"}\n          <a href=\"https://www.flaticon.com/authors/freepik\" title=\"Freepik\">\n            Freepik\n          </a>{\" \"}\n          from{\" \"}\n          <a href=\"https://www.flaticon.com/\" title=\"Flaticon\">\n            www.flaticon.com\n          </a>\n        </div> */}\n        <section id=\"user-info\">\n        {email && (\n          <span>\n            Email: <span data-testid=\"email-field\">{email}</span>\n          </span>\n        )}\n        <span>\n          Despesa Total:\n          {\" \"}\n          <span data-testid=\"total-field\">\n            {total && Math.round(Number(total) * 100) / 100}\n          </span>\n          <span data-testid=\"header-currency-field\">BRL</span>\n        </span>\n        </section>\n      </div>\n    );\n  }\n}\n\nHeader.propTypes = {\n  email: PropTypes.string.isRequired,\n  total: PropTypes.number,\n};\n\nHeader.defaultProps = {\n  total: 0,\n};\n\nconst mapStateToProps = (state) => ({\n  email: state.user.email,\n  total: state.wallet.total,\n});\n\nexport default connect(mapStateToProps)(Header);\n","import PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { getCurrenciesThunk } from '../actions';\n\nclass CurrencyOptions extends Component {\n  componentDidMount() {\n    const { getCurrencies } = this.props;\n    getCurrencies();\n  }\n\n  render() {\n    const { currencies } = this.props;\n    return (\n      <>\n        {\n          currencies\n            .filter((currencie) => (\n              currencie[0] !== 'USDT' && currencie[0] !== 'DOGE'\n            ))\n            .map((currencie, index) => (\n              <option\n                key={ index }\n                value={ currencie[0] }\n              >\n                {currencie[0]}\n              </option>\n            ))\n        }\n      </>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  getCurrencies: () => dispatch(getCurrenciesThunk()),\n});\n\nconst mapStateToProps = (state) => ({\n  currencies: state.wallet.currencies,\n});\n\nCurrencyOptions.propTypes = {\n  currencies: PropTypes\n    .arrayOf(PropTypes.oneOfType([PropTypes.string, PropTypes.object])).isRequired,\n  getCurrencies: PropTypes.func.isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CurrencyOptions);\n","const handleTotalState = (totalCost, expenses) => {\n  const lastElementIndex = expenses.length - 1;\n  const cost = expenses[lastElementIndex].value;\n  const expenseCurrency = expenses[lastElementIndex].currency;\n  const currencies = Object.entries(expenses[lastElementIndex].exchangeRates);\n  const conversionRate = currencies.filter(\n    (currency) => currency[0] === expenseCurrency,\n  )[0][1].ask;\n  const total = cost * conversionRate;\n  totalCost(total);\n};\n\nexport default handleTotalState;\n","import PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { newExpenseThunk, totalCost as totalCostAction } from '../actions';\nimport handleTotalState from '../helpers';\n\nclass AddExpenseButton extends Component {\n  constructor() {\n    super();\n    this.handleClick = this.handleClick.bind(this);\n    this.handleTotal = this.handleTotal.bind(this);\n  }\n\n  async handleClick() {\n    const { value, description, currency, method, tag, newExpense } = this.props;\n    await newExpense({ value, description, currency, method, tag });\n    this.handleTotal();\n  }\n\n  handleTotal() {\n    const { totalCost, expenses } = this.props;\n    handleTotalState(totalCost, expenses);\n  }\n\n  render() {\n    return (\n      <button\n        type=\"button\"\n        onClick={ this.handleClick }\n      >\n        Adicionar despesa\n      </button>\n    );\n  }\n}\n\nAddExpenseButton.propTypes = {\n  currency: PropTypes.string.isRequired,\n  description: PropTypes.string.isRequired,\n  expenses: PropTypes.arrayOf(PropTypes.object).isRequired,\n  method: PropTypes.string.isRequired,\n  newExpense: PropTypes.func.isRequired,\n  tag: PropTypes.string.isRequired,\n  totalCost: PropTypes.func.isRequired,\n  value: PropTypes.number.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  expenses: state.wallet.expenses,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  newExpense: ({ value, description, currency, method, tag }) => (\n    dispatch(newExpenseThunk({ value, description, currency, method, tag }))\n  ),\n  totalCost: (total) => (dispatch(totalCostAction(total))),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AddExpenseButton);\n","import React, { Component } from \"react\";\nimport CurrencyOptions from \"./CurrencyOptions\";\nimport AddExpenseButton from \"./AddExpenseButton\";\n\nexport default class ExpenseForm extends Component {\n  constructor() {\n    super();\n    this.state = {\n      value: 0,\n      description: \"\",\n      currency: \"USD\",\n      method: \"Dinheiro\",\n      tag: \"Alimentação\",\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange({ target: { value, id } }) {\n    this.setState({\n      [id]: value,\n    });\n  }\n\n  render() {\n    const { value, description, currency, method, tag } = this.state;\n    return (\n      <form id=\"expense-form\">\n        <label htmlFor=\"value\" className=\"expense-input\">\n          Valor: <input type=\"number\" id=\"value\" onChange={this.handleChange} required />\n        </label>\n        <label htmlFor=\"description\" className=\"expense-input\">\n          Descrição:{\" \"}\n          <input type=\"text\" id=\"description\" onChange={this.handleChange} />\n        </label>\n        <label htmlFor=\"currency\" className=\"expense-input\">\n          Moeda:{\" \"}\n          <select id=\"currency\" onChange={this.handleChange}>\n            <CurrencyOptions />\n          </select>\n        </label>\n        <label htmlFor=\"method\" className=\"expense-input\">\n          Método de pagamento:{\" \"}\n          <select id=\"method\" onChange={this.handleChange}>\n            <option value=\"Dinheiro\">Dinheiro</option>\n            <option value=\"Cartão de crédito\">Cartão de crédito</option>\n            <option value=\"Cartão de débito\">Cartão de débito</option>\n          </select>\n        </label>\n        <label htmlFor=\"tag\" className=\"expense-input\">\n          Tag:{\" \"}\n          <select id=\"tag\" onChange={this.handleChange}>\n            <option value=\"Alimentação\">Alimentação</option>\n            <option value=\"Lazer\">Lazer</option>\n            <option value=\"Trabalho\">Trabalho</option>\n            <option value=\"Transporte\">Transporte</option>\n            <option value=\"Saúde\">Saúde</option>\n          </select>\n        </label>\n        <AddExpenseButton\n          value={value}\n          description={description}\n          currency={currency}\n          method={method}\n          tag={tag}\n        />\n      </form>\n    );\n  }\n}\n","import React, { Component } from 'react';\n\nclass ExpenseTableHead extends Component {\n  render() {\n    return (\n      <thead>\n        <tr>\n          <th>Descrição</th>\n          <th>Tag</th>\n          <th>Método de pagamento</th>\n          <th>Valor</th>\n          <th>Moeda</th>\n          <th>Câmbio utilizado</th>\n          <th>Valor convertido</th>\n          <th>Moeda de conversão</th>\n          <th>Excluir</th>\n        </tr>\n      </thead>\n    );\n  }\n}\n\nexport default ExpenseTableHead;\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport { removeExpense as removeExpenseAction } from \"../actions\";\n\nclass ExpenseTableBody extends Component {\n  constructor() {\n    super();\n    this.handleDeleteButton = this.handleDeleteButton.bind(this);\n  }\n\n  handleDeleteButton({ target: { value, type } }) {\n    const { removeExpense } = this.props;\n    if (type === 'button') {\n      removeExpense(value);\n      console.log(value)\n    }\n  }\n\n  render() {\n    const { expenses } = this.props;\n\n    return (\n      <tbody>\n        {expenses.length > 0 &&\n          expenses.map((expense) => {\n            const expenseCurrency = expense.currency;\n            return (\n              <tr key={expense.id} id={`tr-${expense.id}`}>\n                <td>{expense.description}</td>\n                <td>{expense.tag}</td>\n                <td>{expense.method}</td>\n                <td>{expense.value}</td>\n                <td>{expense.exchangeRates[expenseCurrency].name}</td>\n                <td>\n                  {Math.round(\n                    expense.exchangeRates[expenseCurrency].ask * 100\n                  ) / 100}\n                </td>\n                <td>\n                  {Math.round(\n                    expense.exchangeRates[expenseCurrency].ask *\n                      expense.value *\n                      100\n                  ) / 100}\n                </td>\n                <td>Real</td>\n                <td>\n                  <button\n                    type=\"button\"\n                    data-testid=\"delete-btn\"\n                    onClick={this.handleDeleteButton}\n                    value={expense.id}\n                  >\n                   x\n                  </button>\n                </td>\n              </tr>\n            );\n          })}\n      </tbody>\n    );\n  }\n}\n\nExpenseTableBody.propTypes = {\n  expenses: PropTypes.arrayOf(PropTypes.object).isRequired,\n  removeExpense: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  expenses: state.wallet.expenses,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  removeExpense: (index) => dispatch(removeExpenseAction(index)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ExpenseTableBody);\n","import React, { Component } from 'react';\nimport ExpenseTableHead from './ExpenseTableHead';\nimport ExpenseTableBody from './ExpenseTableBody';\n\nexport default class ExpensesTable extends Component {\n  render() {\n    return (\n      <table>\n        <ExpenseTableHead />\n        <ExpenseTableBody />\n      </table>\n    );\n  }\n}\n","import React from \"react\";\nimport Header from \"../components/Header\";\nimport ExpenseForm from \"../components/ExpenseForm\";\nimport ExpensesTable from \"../components/ExpensesTable\";\nimport \"../style/Wallet.css\";\n\nexport default class Wallet extends React.Component {\n  render() {\n    return (\n      <div id=\"wallet-wrapper\">\n        <Header />\n        <ExpenseForm />\n        <ExpensesTable />\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport { Route, Switch } from 'react-router';\nimport Login from './pages/Login';\nimport Wallet from './pages/Wallet';\nimport './style/App.css';\n\nfunction App() {\n  return (\n    <Switch>\n      <Route exact path=\"/\" component={ Login } />\n      <Route exact path=\"/carteira\" component={ Wallet } />\n    </Switch>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport store from './store';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <BrowserRouter basename=\"/TrybeWallet\">\n    <Provider store={ store }>\n      <App />\n    </Provider>\n  </BrowserRouter>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}